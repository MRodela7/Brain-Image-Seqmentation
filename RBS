{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"K7FadiXdC2VN"},"outputs":[],"source":["from matplotlib import pyplot as plt\n","import numpy as np \n","import os\n","from scipy import signal\n","from scipy import ndimage\n","from skimage.feature import peak_local_max\n","from skimage.morphology import watershed"]},{"cell_type":"markdown","metadata":{"id":"Z4XnzIMER6u_"},"source":["# Data Preprocessing"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16810,"status":"ok","timestamp":1670645412693,"user":{"displayName":"John Wu","userId":"15342233922410354630"},"user_tz":360},"id":"rA-nOYlFSMU4","outputId":"5d871c8e-39a9-4f19-aaaf-3b419844592c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9aQzhVwyhwi0"},"outputs":[],"source":["'''\n","1. split into input and label\n","2. considered flair, t1, t1c, t2 as multiple inputs\n","3. repeated the label 4 times to match the inputs\n","4. considered each of the frames as inputs\n","'''\n","def process_samples(data):\n","  data = np.swapaxes(data, 2, 3)\n","  data = np.swapaxes(data, 1, 2)\n","  X = data[:4,:,:,:]\n","  y = data[4,:,:,:]\n","  y = np.reshape(y, (1, -1, 240, 240))\n","  y = np.repeat(y, 4, axis=0)\n","  return X, y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hTTDx45CDPRG"},"outputs":[],"source":["def three_channels(X, y):\n","  X = np.stack((X,)*3, axis=-1)\n","  y = np.stack((y,)*3, axis=-1)\n","  return X, y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Uvif34FA0T9c"},"outputs":[],"source":["def normalize_data(X):\n","  X = X/np.max(X)\n","  return X"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KxFQKja-wQn4"},"outputs":[],"source":["def split_labels(label):\n","    label = label[:, :, :, 0] \n","    label_ret = np.empty((label.shape[0], label.shape[1], label.shape[2], 0))\n","    for i in range(5):\n","      if i != 3:\n","        label_add = np.zeros(label.shape)\n","        label_add[label == i] = 1\n","        label_add = label_add[:,:,:, np.newaxis]\n","        label_ret = np.concatenate((label_ret, label_add), axis = 3)\n","    return label_ret"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LwInOJSDSWuq"},"outputs":[],"source":["base_path = \"/content/drive/MyDrive/Bioimaging/Bioimagining Project/data\"\n","'''\n","batch_name : [0,50]\n","type: HGG or LGG or mix\n","split: train, val, test\n","\n","Returns:\n","X and y \n","'''\n","def load_data(batch_num, type_GG, split):\n","    file_name = \"{}_{}\".format(type_GG, split)\n","    X_file = \"{}_X_{}_{}.npy\".format(split, type_GG, batch_num)\n","    y_file = \"{}_y_{}_{}.npy\".format(split, type_GG, batch_num)\n","    X_path = os.path.join(base_path, \"Unet_data\", file_name, X_file)\n","    y_path = os.path.join(base_path, \"Unet_data\", file_name, y_file)\n","\n","    return np.load(X_path), np.load(y_path)"]},{"cell_type":"code","source":["def process_data_more(batch_num, type_GG, split):\n","  #load and reshape\n","  X, y = load_data(batch_num, type_GG, split)\n","  X = np.reshape(X, (-1, X.shape[2], X.shape[3], X.shape[4]))\n","  y = np.reshape(y, (-1, y.shape[2], y.shape[3], y.shape[4]))\n","\n","  #pad to fit model input\n","  X = np.pad(X, ((0,0), (16, 0), (16, 0), (0,0)), mode = 'constant')\n","  y = np.pad(y, ((0,0), (16, 0), (16, 0), (0,0)), mode = 'constant')\n","\n","  # split label into classes\n","  y = split_labels(y)\n","\n","  return X, y"],"metadata":{"id":"-EF8n9oH-Vy4"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8UOtBbJkR31c"},"outputs":[],"source":["# Load in some sample Data \n","X, y = load_data(1, \"mix\", \"val\")\n","X = X[:, :, :, :, 0]\n","y = y[0, :, :, :, 0]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"elapsed":992,"status":"ok","timestamp":1669012510125,"user":{"displayName":"John Wu","userId":"15342233922410354630"},"user_tz":360},"id":"sQCwNpBpSvMB","outputId":"b9b6ed75-cab2-4253-90da-f71857c25007"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fc7cacff710>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["# Ask about if T1 looks correct!!!! - It looks like a binary segmentation label ?!?!?!?\n","\n","sample_flair_img = X[0, 42, :, :]\n","label_img = y[42, :, :]\n","f, ax = plt.subplots(1, 2)\n","ax[0].imshow(sample_flair_img)\n","ax[1].imshow(label_img)"]},{"cell_type":"markdown","metadata":{"id":"tCm6NgRYR-xE"},"source":["#Otsu Thresholding"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CHffM3k1Pdcy"},"outputs":[],"source":["def get_threshold(image, bins = 256):\n","    freq, bin_edges = np.histogram(image, range=(0, 1), bins = bins)\n","    freq_prob = freq / freq.size\n","    freq_indexes = np.array(range(len(freq)))\n","\n","    # Run Otsu's Method to find out optimal threshold for binary segmentation\n","    thresholds = []\n","    for i in range(len(freq)):\n","        w0 = np.sum(freq_prob[:i + 1])\n","        w1 = np.sum(freq_prob[i + 1:])\n","        mean0 = np.sum(freq_indexes[:i + 1] * freq_prob[:i + 1]) / w0\n","        mean1 = np.sum(freq_indexes[i + 1:] * freq_prob[i + 1:]) / w1\n","        thresholds.append((i, w0 * w1 * (mean0 - mean1) ** 2))\n","    # Maximize Between-class Variance\n","    threshold = max(thresholds, key=lambda x: x[1])[0]\n","\n","    # Generate Plot of the Histogram\n","\n","    # plt.plot(range(len(freq)), freq)\n","    # plt.axvline(x=threshold, color='r', label='Threshold')\n","    # plt.title(\"Plot of Histogram of Cells\")\n","    # plt.ylabel(\"Frequency\")\n","    # plt.xlabel(\"Intensity\")\n","    # plt.show()\n","\n","    return threshold"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1669012510125,"user":{"displayName":"John Wu","userId":"15342233922410354630"},"user_tz":360},"id":"GnXsJAKMVEFo","outputId":"c11e727f-6152-460a-9ac9-8da8c43bed5b"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:12: RuntimeWarning: invalid value encountered in double_scalars\n","  if sys.path[0] == '':\n"]}],"source":["t = get_threshold(sample_flair_img)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"executionInfo":{"elapsed":756,"status":"ok","timestamp":1669012510879,"user":{"displayName":"John Wu","userId":"15342233922410354630"},"user_tz":360},"id":"RUjJ1CJaWC_p","outputId":"fdb2f5f1-39b4-4582-e0f9-d8805d9bd924"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fc7ca764e90>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 3 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["segmented_img = (sample_flair_img > (t/ 256)) * 256\n","f, ax = plt.subplots(1, 3)\n","ax[0].imshow(sample_flair_img)\n","ax[1].imshow(label_img)\n","ax[2].imshow(segmented_img)"]},{"cell_type":"markdown","metadata":{"id":"OamasKAxV3RJ"},"source":["# Region Based Growing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qwiy3zJmdO95"},"outputs":[],"source":["# We want a distance threshold from pixel to neighbors for similarity \n","# Idea -> Convolve a custom kernal that finds average distance (no abs though) between neighbor pixels (3x3 kernal) and do otsu thresholding on that \n","def get_similarity_threshold(img):\n","  sqimg = np.square(img)\n","  sqr_diff_kernal = np.array([[1, 1, 1], [1, 8, 1], [1, 1, 1]]) # Gets sum of center^2 + neighbor^2 \n","  dist1 = signal.convolve2d(sqimg, sqr_diff_kernal, mode = \"same\")\n","  add_kernal = np.array([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) # Gets sum of neighbor\n","  dist2 = signal.convolve2d(img, add_kernal, mode = \"same\")\n","  # Gets c^2 + n^2 - 2cn = (c - n)^2\n","  dist = dist1 - 2 * img * dist2\n","  dist = np.sqrt(dist) / 8 \n","  thresh = np.sum(dist) / np.where(dist > 0)[0].size\n","  return thresh\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"59wqXcBntCXa"},"outputs":[],"source":["def RBS(img):\n","  #Seed at the max intensity \n","  # seed = np.argmax(img)\n","  # seed = np.unravel_index(seed, img.shape)\n","  # label_mask = np.zeros(img.shape)\n","  # label_mask[seed] = 1\n","  # local_maxima = seed \n","\n","  # print(np.where(markers))\n","  # plt.imshow(markers)\n","\n","  # queue = [seed]\n","\n","  #Use Otsu's method to find difference threshold \n","  threshold = get_similarity_threshold(img)\n","  # print(threshold)\n","  #Seed at the local maximum\n","  t = get_threshold(img)\n","  segmented_img = (img > (t/ 256))\n","  distances = ndimage.distance_transform_edt(segmented_img)\n","  markers = peak_local_max(distances, indices=False,labels=segmented_img, min_distance = 20)\n","  \n","  local_maxima = np.where(markers)\n","\n","\n","\n","  # Set up BFS growing of the seed based on calculated threshold\n","  label_mask = np.zeros(img.shape)\n","  label_mask[local_maxima] = 1\n","  \n","  # TODO: Try Spread and ARGSORT but with the local maxima \n","  queue = sorted(list(zip(list(local_maxima[0]), list(local_maxima[1]))), key = lambda x: img[x[0], x[1]], reverse=True)[0:1]\n","\n","  def is_valid(img, threshold, neighbor, seed, label_mask):\n","    \n","    if not (neighbor[0] >= 0 and neighbor[0] < img.shape[0]): \n","      return False\n","    if not (neighbor[1] >= 0 and neighbor[1] < img.shape[1]): \n","      return False \n","    return abs(img[seed] - img[neighbor]) <= threshold and label_mask[neighbor] == 0\n","  offsets = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1,1)]\n","  while queue: \n","    curr = queue.pop()  \n","    # if markers[curr]:\n","    #   seed = curr\n","    #   # print(seed)\n","    for offset in offsets: \n","      neighbor = (curr[0] + offset[0], curr[1] + offset[1])\n","      if is_valid(img, threshold, neighbor, curr, label_mask):\n","        label_mask[neighbor] = 1\n","        queue.append(neighbor)\n","  return label_mask\n","\n","def RBS_watershed(img): \n","    t = get_threshold(img)\n","    segmented_img = (img > (t/ 256))\n","    distances = ndimage.distance_transform_edt(segmented_img)\n","    markers = peak_local_max(distances, indices=False,labels=segmented_img)\n","    label_mask = watershed(-1 * distances, markers, mask=segmented_img)\n","    return label_mask\n","\n"]},{"cell_type":"code","source":["def int_and_union(img, gt): \n","    intersection = np.sum(img & gt)\n","    union = img.size + gt.size\n","    return intersection, union \n","\n","def dice_coef(intersection_arr, union_arr, smooth=1):\n","  return 2 * (np.sum(intersection_arr) + smooth) / (np.sum(union_arr) + smooth)"],"metadata":{"id":"3NNxIbOW6HDj"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":3083,"status":"ok","timestamp":1670646327000,"user":{"displayName":"John Wu","userId":"15342233922410354630"},"user_tz":360},"id":"-UE30aoNvFo8","outputId":"ebae04d5-1cb7-4ff2-890f-c8c804a21da5"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-e954a53837ce>:12: RuntimeWarning: invalid value encountered in double_scalars\n","  mean1 = np.sum(freq_indexes[i + 1:] * freq_prob[i + 1:]) / w1\n","<ipython-input-5-c11fce7205b0>:21: FutureWarning: indices argument is deprecated and will be removed in version 0.20. To avoid this warning, please do not use the indices argument. Please see peak_local_max documentation for more details.\n","  markers = peak_local_max(distances, indices=False,labels=segmented_img, min_distance = 20)\n","<ipython-input-4-2ee25d1a66d6>:11: RuntimeWarning: invalid value encountered in sqrt\n","  dist = np.sqrt(dist) / 8\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"]},{"output_type":"stream","name":"stdout","text":["Flair: 0.4754319642709884\n","T1: 0.4572028767236253\n","T1c: 0.44504147117417026\n","T2: 0.44584875933698204\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x1440 with 5 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["X, y = load_data(3, \"mix\", \"val\")\n","X = X[:, :, :, :, 0]\n","example_num = 26\n","img0 =  X[0, example_num, :, :]\n","img1 =  X[1, example_num, :, :]\n","img2 =  X[2, example_num, :, :]\n","img3 =  X[3, example_num, :, :]\n","label_img = y[0, example_num, :, :]\n","label_mask0 = RBS(img0)\n","label_mask1 = RBS(img1)\n","label_mask2 = RBS(img2)\n","label_mask3 = RBS(img3)\n","\n","# xp, yp = seed\n","f, ax = plt.subplots(1, 5, figsize=(20, 20))\n","# ax[0].plot(xp, yp, 'rp')\n","# for i in range(50): \n","#   x, y = np.unravel_index(seeds[i], img.shape)\n","#   ax[0].plot(x, y, 'rp')\n","\n","ax[0].imshow(label_img)\n","ax[0].set_title(\"True Segmentation\")\n","ax[1].imshow(label_mask0)\n","ax[1].set_title(\"Region Based Segmentation (Flair)\")\n","ax[2].imshow(label_mask1)\n","ax[2].set_title(\"Region Based Segmentation (T1)\")\n","ax[3].imshow(label_mask2)\n","ax[3].set_title(\"Region Based Segmentation (T1c)\")\n","ax[4].imshow(label_mask3)\n","ax[4].set_title(\"Region Based Segmentation (T2)\")\n","\n","intersection, union = int_and_union(label_mask0.astype(bool), label_img[:,:,0].astype(bool))\n","intersection1, union1 = int_and_union(~(label_mask0.astype(bool)), ~(label_img[:,:,0].astype(bool)))\n","print(f\"Flair: {dice_coef([intersection, intersection1], [union, union1])}\")\n","\n","intersection, union = int_and_union(label_mask1.astype(bool), label_img[:,:,0].astype(bool))\n","intersection1, union1 = int_and_union(~(label_mask1.astype(bool)), ~(label_img[:,:,0].astype(bool)))\n","print(f\"T1: {dice_coef([intersection, intersection1], [union, union1])}\")\n","\n","intersection, union = int_and_union(label_mask2.astype(bool), label_img[:,:,0].astype(bool))\n","intersection1, union1 = int_and_union(~(label_mask2.astype(bool)), ~(label_img[:,:,0].astype(bool)))\n","print(f\"T1c: {dice_coef([intersection, intersection1], [union, union1])}\")\n","\n","intersection, union = int_and_union(label_mask3.astype(bool), label_img[:,:,0].astype(bool))\n","intersection1, union1 = int_and_union(~(label_mask3.astype(bool)), ~(label_img[:,:,0].astype(bool)))\n","print(f\"T2: {dice_coef([intersection, intersection1], [union, union1])}\")\n"]},{"cell_type":"markdown","metadata":{"id":"Z4TFErgOnEHn"},"source":["#RBS Loop\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"id":"tvistlu5jNzy","executionInfo":{"status":"error","timestamp":1669000066918,"user_tz":360,"elapsed":1178,"user":{"displayName":"John Wu","userId":"15342233922410354630"}},"outputId":"2a0fb554-4419-45ca-fed8-736feccb0956"},"outputs":[{"output_type":"stream","name":"stdout","text":["Running val RBS for Split 0\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-2cab204bae86>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m27\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Running {} RBS for Split {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"mix\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mRBS_X\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-c7f4d81d8592>\u001b[0m in \u001b[0;36mload_data\u001b[0;34m(batch_num, type_GG, split)\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0my_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbase_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Unet_data\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/lib/npyio.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    439\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m                 return format.read_array(fid, allow_pickle=allow_pickle,\n\u001b[0;32m--> 441\u001b[0;31m                                          pickle_kwargs=pickle_kwargs)\n\u001b[0m\u001b[1;32m    442\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    443\u001b[0m             \u001b[0;31m# Try a pickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/lib/format.py\u001b[0m in \u001b[0;36mread_array\u001b[0;34m(fp, allow_pickle, pickle_kwargs)\u001b[0m\n\u001b[1;32m    755\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misfileobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0;31m# We can use the fast fromfile() function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 757\u001b[0;31m             \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    758\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    759\u001b[0m             \u001b[0;31m# This is not a real file. We have to read it the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# Load in some sample Data \n","num_split = 50\n","RBS_path = \"/content/drive/MyDrive/Bioimaging/Bioimagining Project/Region Based Segmentation\"\n","for t in [\"val\", \"test\"]:\n","  for i in range(27):\n","    print(\"Running {} RBS for Split {}\".format(t, i))\n","    X, _ = load_data(i, \"mix\", t)\n","    X = X[:, :, :, :, 0]\n","    RBS_X = np.zeros(X.shape)\n","    for typ in range(X.shape[0]):\n","      for example in range(X.shape[1]):\n","        img =  X[typ, example, :, :]\n","        label_mask = RBS(img)\n","        RBS_X[typ, example, :, :] = label_mask\n","    with open(os.path.join(RBS_path, \"RBS_{}_{}.npy\".format(t, i)), 'wb') as f:\n","        np.save(f, RBS_X)"]},{"cell_type":"markdown","source":["#RBS Dice Coef"],"metadata":{"id":"qso9kscZCiyX"}},{"cell_type":"code","source":["def int_and_union(img, gt): \n","    intersection = np.sum(img & gt)\n","    union = img.size + gt.size\n","    return intersection, union \n","\n","def dice_coef(intersection_arr, union_arr, smooth=1):\n","  return 2 * (np.sum(intersection_arr) + smooth) / (np.sum(union_arr) + smooth)"],"metadata":{"id":"oRzTYOWaDTFz"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QAdvdDhvUI9I","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1b1a74e9-33d0-4cfa-a008-64da1cf082c2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Binary Moving Dice Score at flair_train_0: 0.4709600589618933\n","Binary Moving Dice Score at t1_train_0: 0.48480946214366405\n","Binary Moving Dice Score at t1c_train_0: 0.429368847280786\n","Binary Moving Dice Score at t2_train_0: 0.46227799006681825\n","Binary Moving Dice Score at flair_train_1: 0.46475119885622634\n","Binary Moving Dice Score at t1_train_1: 0.4203486385303362\n","Binary Moving Dice Score at t1c_train_1: 0.4293606728480047\n","Binary Moving Dice Score at t2_train_1: 0.4473375113701713\n","Binary Moving Dice Score at flair_train_2: 0.4682408215483748\n","Binary Moving Dice Score at t1_train_2: 0.40611657316466815\n","Binary Moving Dice Score at t1c_train_2: 0.4323575281373266\n","Binary Moving Dice Score at t2_train_2: 0.4527016850283551\n","Binary Moving Dice Score at flair_train_3: 0.46842260962716015\n","Binary Moving Dice Score at t1_train_3: 0.4010966680119707\n","Binary Moving Dice Score at t1c_train_3: 0.43428190534081657\n","Binary Moving Dice Score at t2_train_3: 0.45546562909463184\n","Binary Moving Dice Score at flair_train_4: 0.4687170260125623\n","Binary Moving Dice Score at t1_train_4: 0.39168733277081114\n","Binary Moving Dice Score at t1c_train_4: 0.43382374819642777\n","Binary Moving Dice Score at t2_train_4: 0.4571567484653895\n","Binary Moving Dice Score at flair_train_5: 0.465589243948967\n","Binary Moving Dice Score at t1_train_5: 0.4071676184530055\n","Binary Moving Dice Score at t1c_train_5: 0.43323617073478865\n","Binary Moving Dice Score at t2_train_5: 0.4569478840189872\n","Binary Moving Dice Score at flair_train_6: 0.4634507363625328\n","Binary Moving Dice Score at t1_train_6: 0.40307199019209417\n","Binary Moving Dice Score at t1c_train_6: 0.43473008030893157\n","Binary Moving Dice Score at t2_train_6: 0.4579442511186285\n","Binary Moving Dice Score at flair_train_7: 0.4636888391043848\n","Binary Moving Dice Score at t1_train_7: 0.41677203930106554\n","Binary Moving Dice Score at t1c_train_7: 0.4360151508137534\n","Binary Moving Dice Score at t2_train_7: 0.45837835717739434\n","Binary Moving Dice Score at flair_train_8: 0.4620769738236177\n","Binary Moving Dice Score at t1_train_8: 0.41183222566876687\n","Binary Moving Dice Score at t1c_train_8: 0.4340066700650897\n","Binary Moving Dice Score at t2_train_8: 0.4586209582061177\n","Binary Moving Dice Score at flair_train_9: 0.46230629709143084\n","Binary Moving Dice Score at t1_train_9: 0.4079472305830683\n","Binary Moving Dice Score at t1c_train_9: 0.4349143472166744\n","Binary Moving Dice Score at t2_train_9: 0.45872428869181686\n","Binary Moving Dice Score at flair_train_10: 0.46313307329898296\n","Binary Moving Dice Score at t1_train_10: 0.40573604128986984\n","Binary Moving Dice Score at t1c_train_10: 0.4360800902254545\n","Binary Moving Dice Score at t2_train_10: 0.4597415816597321\n","Binary Moving Dice Score at flair_train_11: 0.4626518014757718\n","Binary Moving Dice Score at t1_train_11: 0.41311935456921445\n","Binary Moving Dice Score at t1c_train_11: 0.4364790761121395\n","Binary Moving Dice Score at t2_train_11: 0.4591321041616411\n","Binary Moving Dice Score at flair_train_12: 0.4625787434857078\n","Binary Moving Dice Score at t1_train_12: 0.41795529270731846\n","Binary Moving Dice Score at t1c_train_12: 0.43647839594202303\n","Binary Moving Dice Score at t2_train_12: 0.45888585842085144\n","Binary Moving Dice Score at flair_train_13: 0.46237608939100056\n","Binary Moving Dice Score at t1_train_13: 0.41529733294017873\n","Binary Moving Dice Score at t1c_train_13: 0.43705060078479024\n","Binary Moving Dice Score at t2_train_13: 0.4586451384708938\n","Binary Moving Dice Score at flair_train_14: 0.4625708726870149\n","Binary Moving Dice Score at t1_train_14: 0.4123594359273094\n","Binary Moving Dice Score at t1c_train_14: 0.43803590467516296\n","Binary Moving Dice Score at t2_train_14: 0.4589799598761421\n","Binary Moving Dice Score at flair_train_15: 0.4625935313424106\n","Binary Moving Dice Score at t1_train_15: 0.40973033049595176\n","Binary Moving Dice Score at t1c_train_15: 0.43878143331125624\n","Binary Moving Dice Score at t2_train_15: 0.45898838902232\n","Binary Moving Dice Score at flair_train_16: 0.4625544315886629\n","Binary Moving Dice Score at t1_train_16: 0.4070084447683497\n","Binary Moving Dice Score at t1c_train_16: 0.4382962618404758\n","Binary Moving Dice Score at t2_train_16: 0.4583461992439439\n","Binary Moving Dice Score at flair_train_17: 0.46315926385586326\n","Binary Moving Dice Score at t1_train_17: 0.41167527471290016\n","Binary Moving Dice Score at t1c_train_17: 0.4383761527031863\n","Binary Moving Dice Score at t2_train_17: 0.45875107000963333\n","Binary Moving Dice Score at flair_train_18: 0.4636552705389321\n","Binary Moving Dice Score at t1_train_18: 0.4152888001244502\n","Binary Moving Dice Score at t1c_train_18: 0.43786464159724586\n","Binary Moving Dice Score at t2_train_18: 0.4587620425918483\n","Binary Moving Dice Score at flair_train_19: 0.4630087414988022\n","Binary Moving Dice Score at t1_train_19: 0.4129909449691232\n","Binary Moving Dice Score at t1c_train_19: 0.43774432892328086\n","Binary Moving Dice Score at t2_train_19: 0.4587479680222261\n","Binary Moving Dice Score at flair_train_20: 0.4632976074612634\n","Binary Moving Dice Score at t1_train_20: 0.4161763020134778\n","Binary Moving Dice Score at t1c_train_20: 0.4379627284143738\n","Binary Moving Dice Score at t2_train_20: 0.4589140626293793\n","Binary Moving Dice Score at flair_train_21: 0.4639681965812238\n","Binary Moving Dice Score at t1_train_21: 0.41421171959390435\n","Binary Moving Dice Score at t1c_train_21: 0.43811323721534523\n","Binary Moving Dice Score at t2_train_21: 0.45855585478769806\n","Binary Moving Dice Score at flair_train_22: 0.4645153221293116\n","Binary Moving Dice Score at t1_train_22: 0.4129306018543721\n","Binary Moving Dice Score at t1c_train_22: 0.43845440422547766\n","Binary Moving Dice Score at t2_train_22: 0.4586673865495503\n","Binary Moving Dice Score at flair_train_23: 0.4644165529217778\n","Binary Moving Dice Score at t1_train_23: 0.4162636774608555\n","Binary Moving Dice Score at t1c_train_23: 0.43770509755351383\n","Binary Moving Dice Score at t2_train_23: 0.4586813898953186\n","Binary Moving Dice Score at flair_train_24: 0.463721293626643\n","Binary Moving Dice Score at t1_train_24: 0.4149651633867547\n","Binary Moving Dice Score at t1c_train_24: 0.43757164615217703\n","Binary Moving Dice Score at t2_train_24: 0.4589458562851351\n","Binary Moving Dice Score at flair_train_25: 0.46385112464916733\n","Binary Moving Dice Score at t1_train_25: 0.41343498239672016\n","Binary Moving Dice Score at t1c_train_25: 0.43720582675231756\n","Binary Moving Dice Score at t2_train_25: 0.45852874863274806\n","Binary Moving Dice Score at flair_train_26: 0.464101804268038\n","Binary Moving Dice Score at t1_train_26: 0.41206617309997096\n","Binary Moving Dice Score at t1c_train_26: 0.43724142124900567\n","Binary Moving Dice Score at t2_train_26: 0.4586800530220875\n","Binary Moving Dice Score at flair_train_27: 0.46343310098547535\n","Binary Moving Dice Score at t1_train_27: 0.4103374695849226\n","Binary Moving Dice Score at t1c_train_27: 0.43719349671716146\n","Binary Moving Dice Score at t2_train_27: 0.45894242919434663\n","Binary Moving Dice Score at flair_train_28: 0.4637531727805752\n","Binary Moving Dice Score at t1_train_28: 0.408784052043664\n","Binary Moving Dice Score at t1c_train_28: 0.4373224090530011\n","Binary Moving Dice Score at t2_train_28: 0.4591819455915571\n","Binary Moving Dice Score at flair_train_29: 0.46346944380721283\n","Binary Moving Dice Score at t1_train_29: 0.40772133585685755\n","Binary Moving Dice Score at t1c_train_29: 0.43705030685343604\n","Binary Moving Dice Score at t2_train_29: 0.4591702240263419\n","Binary Moving Dice Score at flair_train_30: 0.4637204925349373\n","Binary Moving Dice Score at t1_train_30: 0.4108019902268947\n","Binary Moving Dice Score at t1c_train_30: 0.4368959771495229\n","Binary Moving Dice Score at t2_train_30: 0.45921419285240245\n","Binary Moving Dice Score at flair_train_31: 0.46366334666924663\n","Binary Moving Dice Score at t1_train_31: 0.41292048577764806\n","Binary Moving Dice Score at t1c_train_31: 0.43676972720171475\n","Binary Moving Dice Score at t2_train_31: 0.45920577604468993\n","Binary Moving Dice Score at flair_train_32: 0.463767781039239\n","Binary Moving Dice Score at t1_train_32: 0.41193878357213753\n","Binary Moving Dice Score at t1c_train_32: 0.4368914020498481\n","Binary Moving Dice Score at t2_train_32: 0.45937888281524497\n","Binary Moving Dice Score at flair_train_33: 0.46381411362002645\n","Binary Moving Dice Score at t1_train_33: 0.4146184053593304\n","Binary Moving Dice Score at t1c_train_33: 0.43692160768315214\n","Binary Moving Dice Score at t2_train_33: 0.45915219882216557\n","Binary Moving Dice Score at flair_train_34: 0.46338472368049977\n","Binary Moving Dice Score at t1_train_34: 0.4166597742220753\n","Binary Moving Dice Score at t1c_train_34: 0.43714523414738443\n","Binary Moving Dice Score at t2_train_34: 0.458901526339597\n","Binary Moving Dice Score at flair_train_35: 0.4629688755813668\n","Binary Moving Dice Score at t1_train_35: 0.4153300424079069\n","Binary Moving Dice Score at t1c_train_35: 0.43761405156932004\n","Binary Moving Dice Score at t2_train_35: 0.4588287311750294\n","Binary Moving Dice Score at flair_train_36: 0.46285026845521526\n","Binary Moving Dice Score at t1_train_36: 0.41426250990063374\n","Binary Moving Dice Score at t1c_train_36: 0.4379040988759518\n","Binary Moving Dice Score at t2_train_36: 0.4587609755789401\n","Binary Moving Dice Score at flair_train_37: 0.46286493402357026\n","Binary Moving Dice Score at t1_train_37: 0.4135036099989504\n","Binary Moving Dice Score at t1c_train_37: 0.4380588339077\n","Binary Moving Dice Score at t2_train_37: 0.4590699486269224\n","Binary Moving Dice Score at flair_train_38: 0.4627907527115842\n","Binary Moving Dice Score at t1_train_38: 0.4123452826261064\n","Binary Moving Dice Score at t1c_train_38: 0.4380739357746235\n","Binary Moving Dice Score at t2_train_38: 0.4591178910898872\n","Binary Moving Dice Score at flair_train_39: 0.4627444495703918\n","Binary Moving Dice Score at t1_train_39: 0.4114210360091021\n","Binary Moving Dice Score at t1c_train_39: 0.43789854990510446\n","Binary Moving Dice Score at t2_train_39: 0.4593354400829355\n","Binary Moving Dice Score at flair_train_40: 0.46286312481081937\n","Binary Moving Dice Score at t1_train_40: 0.4138129087586728\n","Binary Moving Dice Score at t1c_train_40: 0.4382994672930112\n","Binary Moving Dice Score at t2_train_40: 0.45940719846815864\n","Binary Moving Dice Score at flair_train_41: 0.46328736347537325\n","Binary Moving Dice Score at t1_train_41: 0.4127767843099662\n","Binary Moving Dice Score at t1c_train_41: 0.4381591390513393\n","Binary Moving Dice Score at t2_train_41: 0.45951042287046007\n","Binary Moving Dice Score at flair_train_42: 0.46344715818782856\n","Binary Moving Dice Score at t1_train_42: 0.4118433014951367\n","Binary Moving Dice Score at t1c_train_42: 0.4380466157923501\n","Binary Moving Dice Score at t2_train_42: 0.4598299097594973\n","Binary Moving Dice Score at flair_train_43: 0.46366571344713675\n","Binary Moving Dice Score at t1_train_43: 0.4134016027129539\n","Binary Moving Dice Score at t1c_train_43: 0.4383843709992547\n","Binary Moving Dice Score at t2_train_43: 0.4598693010825199\n","Binary Moving Dice Score at flair_train_44: 0.4639538070944803\n","Binary Moving Dice Score at t1_train_44: 0.4126601029357343\n","Binary Moving Dice Score at t1c_train_44: 0.4384157671189807\n","Binary Moving Dice Score at t2_train_44: 0.4599885097814722\n","Binary Moving Dice Score at flair_train_45: 0.4637548117519559\n","Binary Moving Dice Score at t1_train_45: 0.41165521869051047\n","Binary Moving Dice Score at t1c_train_45: 0.4381409630503954\n","Binary Moving Dice Score at t2_train_45: 0.4595557868824408\n","Binary Moving Dice Score at flair_train_46: 0.46370561885611916\n","Binary Moving Dice Score at t1_train_46: 0.4110920564001587\n","Binary Moving Dice Score at t1c_train_46: 0.4382136258836339\n","Binary Moving Dice Score at t2_train_46: 0.45949649083247324\n","Binary Moving Dice Score at flair_train_47: 0.46368269979009413\n","Binary Moving Dice Score at t1_train_47: 0.40996455345885974\n","Binary Moving Dice Score at t1c_train_47: 0.4380013432263288\n","Binary Moving Dice Score at t2_train_47: 0.45927410862976537\n","Binary Moving Dice Score at flair_train_48: 0.4637790772228975\n","Binary Moving Dice Score at t1_train_48: 0.4110900699075727\n","Binary Moving Dice Score at t1c_train_48: 0.4378892157404451\n","Binary Moving Dice Score at t2_train_48: 0.4594883474920911\n","Binary Moving Dice Score at flair_train_49: 0.46417312539556166\n","Binary Moving Dice Score at t1_train_49: 0.41053099508668905\n","Binary Moving Dice Score at t1c_train_49: 0.43807262427840393\n","Binary Moving Dice Score at t2_train_49: 0.4597153517855212\n","Binary Moving Dice Score at flair_val_0: 0.46413180622410244\n","Binary Moving Dice Score at t1_val_0: 0.41023156689279855\n","Binary Moving Dice Score at t1c_val_0: 0.43798839432257924\n","Binary Moving Dice Score at t2_val_0: 0.4597208885896172\n","Binary Moving Dice Score at flair_val_1: 0.4642809620813445\n","Binary Moving Dice Score at t1_val_1: 0.4100360504168489\n","Binary Moving Dice Score at t1c_val_1: 0.4380192544168006\n","Binary Moving Dice Score at t2_val_1: 0.459848351998399\n","Binary Moving Dice Score at flair_val_2: 0.46427468274856093\n","Binary Moving Dice Score at t1_val_2: 0.4104243937065772\n","Binary Moving Dice Score at t1c_val_2: 0.4379681444927364\n","Binary Moving Dice Score at t2_val_2: 0.4599038280048511\n","Binary Moving Dice Score at flair_val_3: 0.46429275138292136\n","Binary Moving Dice Score at t1_val_3: 0.410836390056978\n","Binary Moving Dice Score at t1c_val_3: 0.43799845492044714\n","Binary Moving Dice Score at t2_val_3: 0.45988013198111516\n","Binary Moving Dice Score at flair_val_4: 0.4642986415534409\n","Binary Moving Dice Score at t1_val_4: 0.41063975533710595\n","Binary Moving Dice Score at t1c_val_4: 0.43793231847437514\n","Binary Moving Dice Score at t2_val_4: 0.45974489645294536\n","Binary Moving Dice Score at flair_val_5: 0.46427748313465433\n","Binary Moving Dice Score at t1_val_5: 0.41040621635853153\n","Binary Moving Dice Score at t1c_val_5: 0.4378395216408412\n","Binary Moving Dice Score at t2_val_5: 0.459751659389705\n","Binary Moving Dice Score at flair_val_6: 0.4642127285883663\n","Binary Moving Dice Score at t1_val_6: 0.410221934978398\n","Binary Moving Dice Score at t1c_val_6: 0.43778588801486323\n","Binary Moving Dice Score at t2_val_6: 0.4596442323979944\n","Binary Moving Dice Score at flair_val_7: 0.46429473944210425\n","Binary Moving Dice Score at t1_val_7: 0.4096397079752347\n","Binary Moving Dice Score at t1c_val_7: 0.437628536071016\n","Binary Moving Dice Score at t2_val_7: 0.4595712428284843\n","Binary Moving Dice Score at flair_val_8: 0.46437100102320017\n","Binary Moving Dice Score at t1_val_8: 0.40945065109160717\n","Binary Moving Dice Score at t1c_val_8: 0.4375776217063003\n","Binary Moving Dice Score at t2_val_8: 0.4596271395954047\n","Binary Moving Dice Score at flair_val_9: 0.46439188983803176\n","Binary Moving Dice Score at t1_val_9: 0.4098812394018535\n","Binary Moving Dice Score at t1c_val_9: 0.4374758129501049\n","Binary Moving Dice Score at t2_val_9: 0.459672121340015\n","Binary Moving Dice Score at flair_val_10: 0.46428273542611115\n","Binary Moving Dice Score at t1_val_10: 0.41041648547308096\n","Binary Moving Dice Score at t1c_val_10: 0.437524548204969\n","Binary Moving Dice Score at t2_val_10: 0.45960175461620234\n","Binary Moving Dice Score at flair_val_11: 0.4643602122925393\n","Binary Moving Dice Score at t1_val_11: 0.41030651345925034\n","Binary Moving Dice Score at t1c_val_11: 0.43755815880294696\n","Binary Moving Dice Score at t2_val_11: 0.4597077161308089\n","Binary Moving Dice Score at flair_val_12: 0.4644457027667632\n","Binary Moving Dice Score at t1_val_12: 0.4101119736914989\n","Binary Moving Dice Score at t1c_val_12: 0.43756516323379707\n","Binary Moving Dice Score at t2_val_12: 0.45955130453534915\n","Binary Moving Dice Score at flair_val_13: 0.46440689713524164\n","Binary Moving Dice Score at t1_val_13: 0.40991576097422344\n","Binary Moving Dice Score at t1c_val_13: 0.4374295651955816\n","Binary Moving Dice Score at t2_val_13: 0.45951810782135316\n","Binary Moving Dice Score at flair_val_14: 0.4645629986626991\n","Binary Moving Dice Score at t1_val_14: 0.409472272742908\n","Binary Moving Dice Score at t1c_val_14: 0.4374019267783457\n","Binary Moving Dice Score at t2_val_14: 0.4597356744001938\n","Binary Moving Dice Score at flair_val_15: 0.46452777775579956\n","Binary Moving Dice Score at t1_val_15: 0.4093300194192502\n","Binary Moving Dice Score at t1c_val_15: 0.43749958023062924\n","Binary Moving Dice Score at t2_val_15: 0.4597498107417669\n","Binary Moving Dice Score at flair_val_16: 0.46452067206447856\n","Binary Moving Dice Score at t1_val_16: 0.40991289467311465\n","Binary Moving Dice Score at t1c_val_16: 0.43750956172003863\n","Binary Moving Dice Score at t2_val_16: 0.45976098019943196\n","Binary Moving Dice Score at flair_val_17: 0.4645268610710602\n","Binary Moving Dice Score at t1_val_17: 0.4097340419996186\n","Binary Moving Dice Score at t1c_val_17: 0.4374322176996069\n","Binary Moving Dice Score at t2_val_17: 0.45971489666996335\n","Binary Moving Dice Score at flair_val_18: 0.46440655065994485\n","Binary Moving Dice Score at t1_val_18: 0.4095889647853436\n","Binary Moving Dice Score at t1c_val_18: 0.43740084789055916\n","Binary Moving Dice Score at t2_val_18: 0.45968899054128254\n","Binary Moving Dice Score at flair_val_19: 0.4644638866570101\n","Binary Moving Dice Score at t1_val_19: 0.40931501095312106\n","Binary Moving Dice Score at t1c_val_19: 0.4373213027819718\n","Binary Moving Dice Score at t2_val_19: 0.4597107065845354\n","Binary Moving Dice Score at flair_val_20: 0.46452975433970545\n","Binary Moving Dice Score at t1_val_20: 0.4092077148787529\n","Binary Moving Dice Score at t1c_val_20: 0.43744595979051065\n","Binary Moving Dice Score at t2_val_20: 0.45979798536077776\n","Binary Moving Dice Score at flair_val_21: 0.46457312383900656\n","Binary Moving Dice Score at t1_val_21: 0.40890985320216816\n","Binary Moving Dice Score at t1c_val_21: 0.43747692033762564\n","Binary Moving Dice Score at t2_val_21: 0.4597773649400141\n","Binary Moving Dice Score at flair_val_22: 0.4646538074243022\n","Binary Moving Dice Score at t1_val_22: 0.40876486115501554\n","Binary Moving Dice Score at t1c_val_22: 0.4374954521273122\n","Binary Moving Dice Score at t2_val_22: 0.4599174238664446\n","Binary Moving Dice Score at flair_val_23: 0.4645420734176903\n","Binary Moving Dice Score at t1_val_23: 0.4086746973403286\n","Binary Moving Dice Score at t1c_val_23: 0.4375897512486082\n","Binary Moving Dice Score at t2_val_23: 0.4599133990381914\n","Binary Moving Dice Score at flair_val_24: 0.4644935509418864\n","Binary Moving Dice Score at t1_val_24: 0.40903258638723994\n","Binary Moving Dice Score at t1c_val_24: 0.43756221961736036\n","Binary Moving Dice Score at t2_val_24: 0.4599663811066874\n","Binary Moving Dice Score at flair_val_25: 0.4645205351203274\n","Binary Moving Dice Score at t1_val_25: 0.408732009269421\n","Binary Moving Dice Score at t1c_val_25: 0.437487416473702\n","Binary Moving Dice Score at t2_val_25: 0.45986584906612427\n","Binary Moving Dice Score at flair_val_26: 0.46443655490469293\n","Binary Moving Dice Score at t1_val_26: 0.4086004852441357\n","Binary Moving Dice Score at t1c_val_26: 0.43746043152482267\n","Binary Moving Dice Score at t2_val_26: 0.4598060625165839\n","Binary Moving Dice Score at flair_val_27: 0.4645405229534497\n","Binary Moving Dice Score at t1_val_27: 0.4091214476331031\n","Binary Moving Dice Score at t1c_val_27: 0.4373866932442779\n","Binary Moving Dice Score at t2_val_27: 0.45988472818556553\n","Binary Moving Dice Score at flair_val_28: 0.46467948732218045\n","Binary Moving Dice Score at t1_val_28: 0.4088682952439582\n","Binary Moving Dice Score at t1c_val_28: 0.4373751406901913\n","Binary Moving Dice Score at t2_val_28: 0.459908639546605\n","Binary Moving Dice Score at flair_val_29: 0.4646109762559234\n","Binary Moving Dice Score at t1_val_29: 0.4091997377446384\n","Binary Moving Dice Score at t1c_val_29: 0.4373835113487957\n","Binary Moving Dice Score at t2_val_29: 0.45992452008239815\n","Binary Moving Dice Score at flair_val_30: 0.46465504124199963\n","Binary Moving Dice Score at t1_val_30: 0.4096430926932663\n","Binary Moving Dice Score at t1c_val_30: 0.4374711917725759\n","Binary Moving Dice Score at t2_val_30: 0.4599576335645811\n","Binary Moving Dice Score at flair_val_31: 0.464682751220079\n","Binary Moving Dice Score at t1_val_31: 0.4100087148178334\n","Binary Moving Dice Score at t1c_val_31: 0.4374812472620016\n","Binary Moving Dice Score at t2_val_31: 0.45994114205679393\n","Binary Moving Dice Score at flair_val_32: 0.464592188128818\n","Binary Moving Dice Score at t1_val_32: 0.40992261156232546\n","Binary Moving Dice Score at t1c_val_32: 0.43744942723218544\n","Binary Moving Dice Score at t2_val_32: 0.45988675369987136\n","Binary Moving Dice Score at flair_val_33: 0.4646724900228446\n","Binary Moving Dice Score at t1_val_33: 0.4097776860355242\n","Binary Moving Dice Score at t1c_val_33: 0.43748030329763765\n","Binary Moving Dice Score at t2_val_33: 0.4599718618170498\n","Binary Moving Dice Score at flair_val_34: 0.4646279263981931\n","Binary Moving Dice Score at t1_val_34: 0.40963410925195054\n","Binary Moving Dice Score at t1c_val_34: 0.4374236465825206\n","Binary Moving Dice Score at t2_val_34: 0.45986483060447303\n","Binary Moving Dice Score at flair_val_35: 0.4645609419537357\n","Binary Moving Dice Score at t1_val_35: 0.41042771016261553\n","Binary Moving Dice Score at t1c_val_35: 0.4374594968055593\n","Binary Moving Dice Score at t2_val_35: 0.459921764533853\n","Binary Moving Dice Score at flair_val_36: 0.46435941362732136\n","Binary Moving Dice Score at t1_val_36: 0.4101881696312991\n","Binary Moving Dice Score at t1c_val_36: 0.4376669617525756\n","Binary Moving Dice Score at t2_val_36: 0.4598979957310221\n","Binary Moving Dice Score at flair_val_37: 0.46429315115012376\n","Binary Moving Dice Score at t1_val_37: 0.41059139690495594\n","Binary Moving Dice Score at t1c_val_37: 0.4377400962667561\n","Binary Moving Dice Score at t2_val_37: 0.45990293067065285\n","Binary Moving Dice Score at flair_val_38: 0.4642758055015789\n","Binary Moving Dice Score at t1_val_38: 0.41046036716508494\n","Binary Moving Dice Score at t1c_val_38: 0.4377245975004076\n","Binary Moving Dice Score at t2_val_38: 0.4599501934849827\n","Binary Moving Dice Score at flair_val_39: 0.46425944706695643\n","Binary Moving Dice Score at t1_val_39: 0.4103244769153592\n","Binary Moving Dice Score at t1c_val_39: 0.4377209311631412\n","Binary Moving Dice Score at t2_val_39: 0.4599247776038239\n","Binary Moving Dice Score at flair_val_40: 0.46432841072368813\n","Binary Moving Dice Score at t1_val_40: 0.4101388489685939\n","Binary Moving Dice Score at t1c_val_40: 0.43774653151263887\n","Binary Moving Dice Score at t2_val_40: 0.4599812194064758\n","Binary Moving Dice Score at flair_val_41: 0.46426349322380916\n","Binary Moving Dice Score at t1_val_41: 0.4099554028196402\n","Binary Moving Dice Score at t1c_val_41: 0.43773581279162427\n","Binary Moving Dice Score at t2_val_41: 0.4600195863420584\n","Binary Moving Dice Score at flair_val_42: 0.4643326942305876\n","Binary Moving Dice Score at t1_val_42: 0.40970144810980846\n","Binary Moving Dice Score at t1c_val_42: 0.4377266543899683\n","Binary Moving Dice Score at t2_val_42: 0.4600361234474489\n","Binary Moving Dice Score at flair_val_43: 0.464358905771604\n","Binary Moving Dice Score at t1_val_43: 0.41019060361186116\n","Binary Moving Dice Score at t1c_val_43: 0.4377143716549064\n","Binary Moving Dice Score at t2_val_43: 0.4599789745274619\n","Binary Moving Dice Score at flair_val_44: 0.4644068663422198\n","Binary Moving Dice Score at t1_val_44: 0.4105412635397491\n","Binary Moving Dice Score at t1c_val_44: 0.43777156368414166\n","Binary Moving Dice Score at t2_val_44: 0.4600114468931728\n","Binary Moving Dice Score at flair_val_45: 0.46438211109278743\n","Binary Moving Dice Score at t1_val_45: 0.4102885523650135\n","Binary Moving Dice Score at t1c_val_45: 0.43774582751657964\n","Binary Moving Dice Score at t2_val_45: 0.45998269852573354\n","Binary Moving Dice Score at flair_val_46: 0.4643625625398182\n","Binary Moving Dice Score at t1_val_46: 0.410113220231469\n","Binary Moving Dice Score at t1c_val_46: 0.4377073669388704\n","Binary Moving Dice Score at t2_val_46: 0.4599771456475709\n","Binary Moving Dice Score at flair_val_47: 0.46422211476226516\n","Binary Moving Dice Score at t1_val_47: 0.4099716637927184\n","Binary Moving Dice Score at t1c_val_47: 0.4377379361445236\n","Binary Moving Dice Score at t2_val_47: 0.4599376322539216\n","Binary Moving Dice Score at flair_val_48: 0.46431163372222095\n","Binary Moving Dice Score at t1_val_48: 0.4104045239874693\n","Binary Moving Dice Score at t1c_val_48: 0.43769957521012814\n","Binary Moving Dice Score at t2_val_48: 0.45980524632063946\n","Binary Moving Dice Score at flair_val_49: 0.4641740335258377\n","Binary Moving Dice Score at t1_val_49: 0.41005832850337126\n","Binary Moving Dice Score at t1c_val_49: 0.4376078419752916\n","Binary Moving Dice Score at t2_val_49: 0.45975712561336224\n","Binary Moving Dice Score at flair_test_0: 0.464140611037586\n","Binary Moving Dice Score at t1_test_0: 0.4098462339188527\n","Binary Moving Dice Score at t1c_test_0: 0.4375131809099512\n","Binary Moving Dice Score at t2_test_0: 0.45955411138061003\n","Binary Moving Dice Score at flair_test_1: 0.46402919292805134\n","Binary Moving Dice Score at t1_test_1: 0.40972816682787394\n","Binary Moving Dice Score at t1c_test_1: 0.4375838454664008\n","Binary Moving Dice Score at t2_test_1: 0.45951668462486084\n","Binary Moving Dice Score at flair_test_2: 0.4640191857784452\n","Binary Moving Dice Score at t1_test_2: 0.40955310483016144\n","Binary Moving Dice Score at t1c_test_2: 0.437532908475639\n","Binary Moving Dice Score at t2_test_2: 0.4594858719785607\n","Binary Moving Dice Score at flair_test_3: 0.4640547163467769\n","Binary Moving Dice Score at t1_test_3: 0.4094662169273872\n","Binary Moving Dice Score at t1c_test_3: 0.43752011046182365\n","Binary Moving Dice Score at t2_test_3: 0.459472121808598\n","Binary Moving Dice Score at flair_test_4: 0.4639995303368303\n","Binary Moving Dice Score at t1_test_4: 0.40932025922015286\n","Binary Moving Dice Score at t1c_test_4: 0.437464957668356\n","Binary Moving Dice Score at t2_test_4: 0.45946582871103253\n","Binary Moving Dice Score at flair_test_5: 0.46397255955295885\n","Binary Moving Dice Score at t1_test_5: 0.4091529756919615\n","Binary Moving Dice Score at t1c_test_5: 0.4374180798509608\n","Binary Moving Dice Score at t2_test_5: 0.45953504816093343\n","Binary Moving Dice Score at flair_test_6: 0.4639202565685288\n","Binary Moving Dice Score at t1_test_6: 0.4093385804272533\n","Binary Moving Dice Score at t1c_test_6: 0.43737035296377297\n","Binary Moving Dice Score at t2_test_6: 0.4595568530210009\n","Binary Moving Dice Score at flair_test_7: 0.46389632924029234\n","Binary Moving Dice Score at t1_test_7: 0.40983792824168097\n","Binary Moving Dice Score at t1c_test_7: 0.43739275050211307\n","Binary Moving Dice Score at t2_test_7: 0.4595566653164175\n","Binary Moving Dice Score at flair_test_8: 0.4639596102816145\n","Binary Moving Dice Score at t1_test_8: 0.4096726714789915\n","Binary Moving Dice Score at t1c_test_8: 0.43732565587563715\n","Binary Moving Dice Score at t2_test_8: 0.45956555927537396\n","Binary Moving Dice Score at flair_test_9: 0.4639983994070205\n","Binary Moving Dice Score at t1_test_9: 0.41000354527399596\n","Binary Moving Dice Score at t1c_test_9: 0.43724671777347174\n","Binary Moving Dice Score at t2_test_9: 0.45964694932017525\n","Binary Moving Dice Score at flair_test_10: 0.46386032283344886\n","Binary Moving Dice Score at t1_test_10: 0.41028158429473627\n","Binary Moving Dice Score at t1c_test_10: 0.4371332952518651\n","Binary Moving Dice Score at t2_test_10: 0.4597207140349895\n","Binary Moving Dice Score at flair_test_11: 0.463860237847683\n","Binary Moving Dice Score at t1_test_11: 0.41067160994042484\n","Binary Moving Dice Score at t1c_test_11: 0.4370433273401472\n","Binary Moving Dice Score at t2_test_11: 0.4597866943472499\n","Binary Moving Dice Score at flair_test_12: 0.46388169345916086\n","Binary Moving Dice Score at t1_test_12: 0.41052571129240795\n","Binary Moving Dice Score at t1c_test_12: 0.4370236333088946\n","Binary Moving Dice Score at t2_test_12: 0.45973345715680447\n","Binary Moving Dice Score at flair_test_13: 0.4639338479787315\n","Binary Moving Dice Score at t1_test_13: 0.41086478462785364\n","Binary Moving Dice Score at t1c_test_13: 0.4369606761605558\n","Binary Moving Dice Score at t2_test_13: 0.4597935593500337\n","Binary Moving Dice Score at flair_test_14: 0.4639288948069481\n","Binary Moving Dice Score at t1_test_14: 0.4116360054525523\n","Binary Moving Dice Score at t1c_test_14: 0.4368383032511279\n","Binary Moving Dice Score at t2_test_14: 0.4597319434100007\n","Binary Moving Dice Score at flair_test_15: 0.46387458915907515\n","Binary Moving Dice Score at t1_test_15: 0.41146587070440277\n","Binary Moving Dice Score at t1c_test_15: 0.43683098957379535\n","Binary Moving Dice Score at t2_test_15: 0.45978621789339436\n","Binary Moving Dice Score at flair_test_16: 0.4638796483442194\n","Binary Moving Dice Score at t1_test_16: 0.41179221859395\n","Binary Moving Dice Score at t1c_test_16: 0.4367875586788678\n","Binary Moving Dice Score at t2_test_16: 0.4597331215160924\n","Binary Moving Dice Score at flair_test_17: 0.46388816645903097\n","Binary Moving Dice Score at t1_test_17: 0.4115892782360991\n","Binary Moving Dice Score at t1c_test_17: 0.43671287444310425\n","Binary Moving Dice Score at t2_test_17: 0.4597054765990502\n","Binary Moving Dice Score at flair_test_18: 0.46393566655300733\n","Binary Moving Dice Score at t1_test_18: 0.4115300598771949\n","Binary Moving Dice Score at t1c_test_18: 0.4367316421720097\n","Binary Moving Dice Score at t2_test_18: 0.45975865866383164\n","Binary Moving Dice Score at flair_test_19: 0.4639330496334481\n","Binary Moving Dice Score at t1_test_19: 0.41141042012580176\n","Binary Moving Dice Score at t1c_test_19: 0.43668850795335196\n","Binary Moving Dice Score at t2_test_19: 0.4596959737343964\n"]}],"source":["num_split = 50\n","RBS_path = \"/content/drive/MyDrive/Bioimaging/Bioimagining Project/Region Based Segmentation\"\n","cnc_typs = [\"flair\", \"t1\", \"t1c\", \"t2\"]\n","for t in [\"train\", \"val\", \"test\"]:\n","  for i in range(num_split): \n","    for k in range(4): \n","      _, test_y = load_data(i, \"mix\", t)\n","      # for sub in range(0, test_X.shape[0], 25): \n","      #   pred_y = model(test_X[sub:max(sub+25, test_X.shape[0])])\n","      with open(os.path.join(RBS_path, \"Copy of RBS_{}_{}.npy\".format(t, i)), 'rb') as f:\n","          pred_y = np.load(f)\n","      test_y = test_y[:,:,:,:,0]\n","      pred_y = pred_y.astype(bool)[k, :, :, :]\n","      test_y = test_y.astype(bool)[k, :, :, :]\n","\n","      intersection, union = int_and_union(pred_y, test_y)\n","      intersection1, union1 = int_and_union(~pred_y, ~test_y)\n","      dice_path = \"/content/drive/MyDrive/Bioimaging/Bioimagining Project/Dice\"\n","\n","      iu_list = [intersection, intersection1, union, union1]\n","      names = [\"RBS_intersection_{}.npy\".format(cnc_typs[k]), \"RBS_union_{}.npy\".format(cnc_typs[k])]\n","      iu = [np.array([]), np.array([])]\n","\n","      for j in range(2): \n","        var = names[j]\n","        fname = os.path.join(dice_path, var)\n","        if os.path.exists(fname):\n","          with open(fname, 'rb') as f:\n","            iu[j] = np.load(f)\n","        iu[j] = np.append(iu[j], iu_list[2 * j])\n","        iu[j] = np.append(iu[j], iu_list[2 * j + 1])\n","        with open(fname, 'wb') as f:\n","            np.save(f, iu[j])\n","\n","      print(\"Binary Moving Dice Score at {}_{}_{}: {}\".format(cnc_typs[k], t, i, dice_coef(iu[0], iu[1])))"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}